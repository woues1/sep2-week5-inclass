// File: Jenkinsfile
pipeline {
    agent any
    environment {
        SONARQUBE_SERVER = 'SonarQubeServer'
        SONAR_TOKEN = 'sqa_39941cd1a716bfa0d138ef4bc053f7b62aec2d7a' // Store the token securely
        DOCKERHUB_CREDENTIALS_ID = 'Docker_Hub'
        DOCKERHUB_REPO='tonihirv/myapp'
        DOCKER_IMAGE_TAG='latest'
}
stages {
    stage('Checkout') {
        steps {
            git branch: 'main', url: 'https://github.com/woues1/sep2-week5-inclass.git'
        }
    }
    stage('Build') {
        steps {
            bat 'mvn clean install'
        }
    }
    stage('SonarQube Analysis') {
        steps {
            withSonarQubeEnv('SonarQubeServer') {
                bat """
                sonar-scanner ^
                -Dsonar.projectKey=devops-demo ^
                -Dsonar.sources=src ^
                -Dsonar.projectName=DevOps-Demo ^
                -Dsonar.host.url=http://localhost:9000 ^
                -Dsonar.login=${env.SONAR_TOKEN} ^
                -Dsonar.java.binaries=target/classes
                """
            }
        }
    }
       stage('Build Docker Image') {
                    steps {
                        // Build Docker image
                        script {
                            docker.build("${env.DOCKERHUB_REPO}:${env.DOCKER_IMAGE_TAG}")
                        }
                    }
                }
                stage('Push Docker Image to Docker Hub') {
                    steps {
                        // Push Docker image to Docker Hub
                        bat """

                        docker login -u ${env.DOCKERHUB_CREDENTIALS_ID} -p ${env.DOCKERHUB_PASSWORD}
                        echo "${env.DOCKERHUB_CREDENTIALS_ID}"
                        """
                    }
                }

}
}